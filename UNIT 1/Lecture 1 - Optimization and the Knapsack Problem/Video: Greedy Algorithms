0/1 Knapsack Inherently Exponential

Greedy Algorithm a Practical Alternative
-while knapsock not full, put 'best' available item in

what does best mean?
-most valuable
-least expensive
-highest value/units

class Food(object):
    def __init__(self, n, v, w):
        self.name = n
        self.value = v
        self.calories = w
        
    def getValue(self):
        return self.value
    
    def getCost(self):
        return self.calories
    
    def density(self):
        return self.getValue()/self.getCost()
    
    def __str__(self):
        return self.name + ': <' + str(self.value)\
    + ', ' + str(self.calories) + '>'
    
def buildMenu(names, values, calories):
    """names, values, calories lists of same length.
    name a list of strings
    values and calories lists of numbers
    returns list of foods"""
    menu = []
    for i in range(len(values)):
        menu.append(Food(names[i], values[i], calories[i]))
    return menu

def greedy(items, maxCost, keyFunction):
    """Assumes items a list, maxCost >= 0,
    keyFunction maps elements of items to numbers"""
    itemsCopy = sorted(items, key = keyFunction, reverse = True)
    result = []
    totalValue, totalCost = 0.0, 0.0
    
    for i in range(len(itemsCopy)):
        if (totalCost+itemsCopy[i].getCost()) <= maxCost:
            result.append(itemsCopy[i])
            totalCost += itemsCopy[i].getCost()
            totalValue += itemsCopy[i].getValue()
            
    return (result, totalValue)
    
def testGreedy(items, constraint, keyFunction):
    taken, val = greedy(items, constraint, keyFunction)
    print('Total value of items taken=', val)
    for item in taken:
        print(' ', item)
        
def testGreedys(maxUnits):
    print('Use greedy by value to allocate', maxUnits, 'calories')
    testGreedy(foods, maxUnits, Food.getValue)
    print('\nUse greedy by cost to allocate', maxUnits, 'calories')
    testGreedy(foods, maxUnits, lambda x: 1/Food.getCost(x))
    print('\nUse greedy by density to allocate', maxUnits, 'calories')
    testGreedy(foods, maxUnits, Food.density)
    
names = ['wine', 'beer', 'pizza', 'burger', 'fries',
         'cola', 'apple', 'donut', 'cake']
values = [89,90,95,100,90,79,50,10]
calories = [123,154,258,354,365,150,95,195]
foods = buildMenu(names, values, calories)

testGreedys(foods, 750)
    
Use greedy by value to allocate 750 calories
Total value of items taken= 284.0
  burger: <100, 354>
  pizza: <95, 258>
  wine: <89, 123>

Use greedy by cost to allocate 750 calories
Total value of items taken= 318.0
  apple: <50, 95>
  wine: <89, 123>
  cola: <79, 150>
  beer: <90, 154>
  donut: <10, 195>

Use greedy by density to allocate 750 calories
Total value of items taken= 318.0
  wine: <89, 123>
  beer: <90, 154>
  cola: <79, 150>
  apple: <50, 95>
  donut: <10, 195>
  
Why different answers?
-locally 'optimal' choices don't always yield a globally optimal solution
-greedy by density not always better

Pros and Cons of Greedy
-easy to implement
-computationally effiecient

-doesn't always yield best solution
-don't know how good approx is

  
  Algorithmic Efficiency
  sorted = n log n time where n = len(items)
  iteration over items copy = n
  n log n + n << 2^n
  
  lambda
  -lambda used to create anonymous functions
  -value of expression is function
  lambda<id1, id2, ... idn>:<expression>
  returns a function of n arguments
  
f1 = lambda x: x

f1(3)
Out[2]: 3

f1('Ana')
Out[3]: 'Ana'

f2 = lambda x,y: x+y

f2(2,3)
Out[5]: 5

f2('Ana','Bell')
Out[6]: 'AnaBell'

f3 = lambda x,y: 'factor' if (x%y == 0) else 'not factor'

f3(4,2)
Out[8]: 'factor'

f3(7,2)
Out[9]: 'not factor'

possible to write amazing complicated lambda expressions
DON'T - use 'def' instead
  
