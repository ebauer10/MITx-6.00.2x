Class Node

class Node(object):
    def __init__(self, name):
        """Assumes name is a string"""
        self.name = name
    def getName(self):
        return self.name
    def __str__(self):
        return self.name
        
 reason for defining this class is to leave open the possibility of
 having a more complicated node at a later date, with more properties
 
 Class Edge
 
 class Edge(object):
    def __init__(self, src, dest):
        """Assumes src and dest are nodes"""
        self.src = src
        self.dest = dest
    def getSource(self):
        return self.src
    def getDestination(self):
        return self.dest
    def __str__(self):
        return self.src.getName() + '->' + self.dest.getName()
        
 Common Representations of Digraphs
 
 -adjacency matrix
 __rows: source nodes
 __columns: destination nodes
 __cells[s, d] = 1 if there is an edge from s to d, 0 otherwise
 
 -adjacency list
 __associate with each node a list of destination nodes
 
Class Digraph
 
class Digraph(object):
    """edges is a dict mapping each node to a list of its children"""
    
    def __init__(self):
        self.edges = {}
        
    def addNode(self, node):
        if node in self.edges:
            raise ValueError('Duplicate Node')
        else:
            self.edges[node]
            
    def addEdge(self, edge):
        src = edge.getSource()
        dest = edge.getDestination()
        if no (src in self.edges and dest in self.edges):
            raise ValueError('Node not in graph')
        self.edges[src].append(dest)
        
    def childrenOf(self, node):
        return self.edges[node]
    
    def hasNode(self, node):
        return node in self.edges
    
    def getNode(self, name):
        for n in self.edges:
            if n.getName() == name:
                return n
        raise NameError(name)
        
    def __str__(self):
        result = ''
        for src in self.edges:
            for dest in self.edges[src]:
                result = result + src.getName() + '->'\
                + dest.getName() + '\n'
        return result [:-1] #omit final newline
        
Class Digraph       
    
class Graph(Digraph):
    def addEdge(self, edge):
        Digraph.addEdge(self, edge)
        rev = Edge(edge.getDestination(), edge.getSource())
        Digraph.addEdge(self, rev)
        
Why is Graph a subclass of digraph instead of other way?
Substitution Rule from 6.00.1x
-if client code works correctly using an instance of the supertype,
 it should also work correctly when an instance of the subtype
 is substituted for the instance of the supertype

Clsasic Graph Optimization Problem
Shortest path from n1 to n2
-shortest sequence of edges such that:
__source node of first edge is n1
__destination of last edge is n2
__for edges e1 and e2, in the sequence, if e2 follows e1 in the
  sequence, the source of e2 is the destination of e1
  
Shortest weighted path
-minimize the sum of the weights of the edges in the path

Some Shortest Path Problems
-finding route from one place to another
-designing comms networks
-finding path for molecule through chemical network

An example
-the presence of cycles or possible presence of cycles complicates the shortest path problem

Adjacency list for the example
Boston: Providence, New York
Providence: Boston, New York
New York: Chicago
Chicago: Denver, Phoenix
Denver: Phoenix, New York
Los Angeles: Boston

def buildCityGraph(graphType):
    g = graphType()
    for name in ('Boston', 'Providence', 'New York', 'Chicago', 'Denver',
                 'Phoenix', 'Los Angeles'): #create 7 nodes
        g.addNode(Node(name))
    g.addEdge(Edge(g.getNode('Boston'), g.getNode('Providence')))
    g.addEdge(Edge(g.getNode('Boston'), g.getNode('New York')))
    g.addEdge(Edge(g.getNode('Providence'), g.getNode('Boston')))
    g.addEdge(Edge(g.getNode('Providence'), g.getNode('New York')))
    g.addEdge(Edge(g.getNode('New York'), g.getNode('Chicago')))
    g.addEdge(Edge(g.getNode('Chicago'), g.getNode('Denver')))
    g.addEdge(Edge(g.getNode('Denver'), g.getNode('Phoenix')))
    g.addEdge(Edge(g.getNode('Denver'), g.getNode('New York')))
    g.addEdge(Edge(g.getNode('Chicago'), g.getNode('Phoenix')))
    g.addEdge(Edge(g.getNode('Los Angeles'), g.getNode('Boston')))
    return g
    
print(buildCityGraph(Graph))
