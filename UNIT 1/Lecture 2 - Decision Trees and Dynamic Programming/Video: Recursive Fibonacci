Search Tree Algorithm
-gave us better answers than greedy
-finished quickly
-but 2^8 is not a large number
-see what happens with large menu

Code to Try Larger Examples

import random

def buildLargeMenu(numItems, maxVal, maxCost):
    items = []
    for i in range(numItems):
        items.append(Food(str(i), random.randint(1, maxVal), random.randint(1, maxCost)))
    return items

for numItems in (5, 10, 15, 20, 25, 30, 35, 40, 45):
    items = buildLargeMenu(numItems, 90, 250)
    testMaxVal(items, 750, False)
            
Recursive Implementation of Fibonnaci

def fib(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fib(n-1) + fib(n-2)
        
-terribly inefficient
-continually repeating calls already solved over and over again
-record value and then look it up instead of computing - "memoization"

Using a memo to Compute Fibonacci

def fastFib(n, memo = {}):
    """Assumes n is an int >= 0, memo used only by recursive calls
    Returns Fibonacci of n"""
    if n == 0 or n == 1:
        return 1
    try:
        return memo[n]
    except KeyError:
        result = fastFib(n-1, memo) + fastFib(n-2, memo)
        memo[n] = result
        return result
    
for i in range(121):
    print('fib('+str(i)+') =', fastFib(i))
    
When does dynammic programming work?
Optimal substructure: globally optimal solution can be found by combining optimal solutions to local subproblems
ex. for x>1, fib(x) = fib(x-1) + fib(x-2)
Overlapping subproblems: finding optimal solution involves solving the same problem multiple times
ex. computing fib(x) many times
