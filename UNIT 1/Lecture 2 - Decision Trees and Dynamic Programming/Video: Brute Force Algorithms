Brute Force Algorithm
1. enumerate all possible combinations of items
2. remove all combinations whose units exceed weight
3. from remaining combos, choose any ONE value who is the largest

Search Tree Implementation
-tree built tow down starting with root
-first element selected from still to be considered items
__if no room, node constructed that reflects consequence, left child
__also explore consequences of not taking that item, right child
-process applied recursively to non-leaf children
-choose node with highest value

left-first, depth-first enumeration

Computational Complexity
-time based on number of nodes generated
-number of levels is number of items to choose from
-number of nodes at level i is 2^i
-so, if there are n items the number of nodes is
 i=n
 SUM ( 2^i )        i.e. O(2^n+1)
 i=0
 -optimization - don't explore parts of the tree that violate contraint
 -doesn't change complexity
 
class Food(object):
    def __init__(self, n, v, w):
        self.name = n
        self.value = v
        self.calories = w
        
    def getValue(self):
        return self.value
    
    def getCost(self):
        return self.calories
    
    def density(self):
        return self.getValue()/self.getCost()
    
    def __str__(self):
        return self.name + ': <' + str(self.value)\
    + ', ' + str(self.calories) + '>'
    
def buildMenu(names, values, calories):
    """names, values, calories lists of same length.
    name a list of strings
    values and calories lists of numbers
    returns list of foods"""
    menu = []
    for i in range(len(values)):
        menu.append(Food(names[i], values[i], calories[i]))
    return menu

def greedy(items, maxCost, keyFunction):
    """Assumes items a list, maxCost >= 0,
    keyFunction maps elements of items to numbers"""
    itemsCopy = sorted(items, key = keyFunction, reverse = True)
    result = []
    totalValue, totalCost = 0.0, 0.0
    
    for i in range(len(itemsCopy)):
        if (totalCost+itemsCopy[i].getCost()) <= maxCost:
            result.append(itemsCopy[i])
            totalCost += itemsCopy[i].getCost()
            totalValue += itemsCopy[i].getValue()
            
    return (result, totalValue)

def testGreedy(items, constraint, keyFunction):
    taken, val = greedy(items, constraint, keyFunction)
    print('Total value of items taken=', val)
    for item in taken:
        print(' ', item)
        
def testGreedys(foods, maxUnits):
    print('Use greedy by value to allocate', maxUnits, 'calories')
    testGreedy(foods, maxUnits, Food.getValue)
    print('\nUse greedy by cost to allocate', maxUnits, 'calories')
    testGreedy(foods, maxUnits, lambda x: 1/Food.getCost(x))
    print('\nUse greedy by density to allocate', maxUnits, 'calories')
    testGreedy(foods, maxUnits, Food.density)

def maxVal(toConsider, avail):
    """Assumes toConsider a list of items, avail a weight
    Returns a tuples of the total value of a solution to the 0/1 knapsack
    problem and the items of that solution"""
    if toConsider == [] or avail == 0:
        result = (0, ())
    elif toConsider[0].getCost() > avail:
        # Explore right branch only
        result = maxVal(toConsider[1:], avail)
    else:
        nextItem = toConsider[0]
        # Explore left branch
        withVal, withToTake = maxVal(toConsider[1:], 
                                     avail - nextItem.getCost())
        withVal += nextItem.getValue()
        # Explore right branch
        withoutVal, withoutToTake = maxVal(toConsider[1:], avail)
        # Explore better branch
        if withVal > withoutVal:
            result = (withVal, withToTake + (nextItem,))
        else:
            result = (withoutVal, withoutToTake)
    return result

def testMaxVal(foods, maxUnits, printItems = True):
    print('Use sesarch tree to allocate', maxUnits, 'calories')
    val, taken = maxVal(foods, maxUnits)
    print('Total value of items taken =', val)
    if printItems:
        for item in taken:
            print(' ', item)
            
names = ['wine', 'beer', 'pizza', 'burger', 'fries',
         'cola', 'apple', 'donut', 'cake']
values = [89,90,95,100,90,79,50,10]
calories = [123,154,258,354,365,150,95,195]
foods = buildMenu(names, values, calories)

testGreedys(foods, 750)
print(' ')
testMaxVal(foods, 750)

Use greedy by value to allocate 750 calories
Total value of items taken= 284.0
  burger: <100, 354>
  pizza: <95, 258>
  wine: <89, 123>

Use greedy by cost to allocate 750 calories
Total value of items taken= 318.0
  apple: <50, 95>
  wine: <89, 123>
  cola: <79, 150>
  beer: <90, 154>
  donut: <10, 195>

Use greedy by density to allocate 750 calories
Total value of items taken= 318.0
  wine: <89, 123>
  beer: <90, 154>
  cola: <79, 150>
  apple: <50, 95>
  donut: <10, 195>
 
Use sesarch tree to allocate 750 calories
Total value of items taken = 353
  cola: <79, 150>
  pizza: <95, 258>
  beer: <90, 154>
  wine: <89, 123>
    
does not actually build search tree
local variable 'result' records best solution found so far

Search Tree Worked Great
-gave us a better answer
-finished quickly
-But 2^8 not a large number - check more extensive menu
