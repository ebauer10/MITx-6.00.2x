How Far will a drunk get?
-write a program to simulate lots of steps

Structure of Simulation
-simulate one walk of k steps
-simulate n such walks
-report average distance from origin

Useful Abstractions
-location-a place
-field-a collection of places and drunks
-drunk-somebody who wanders place to place in a field

class Location(object):
    def __init__(self, x, y):
        """x and y are floats"""
        self.x = x
        self.y = y
        
    def move(self, deltaX, deltaY):
        """deltaX and deltaY are floats"""
        return Location(self.x + deltaX,
                        self..y + deltaY)
    def getX(self):
        return self.x
    def getY(self):
        return self.y
        
    def distFrom(self, other):
        ox = other.x
        oy = other.y
        xDist = self.x - ox
        yDist = self.y - oy
        return (xDist**2 + yDist**2)**0.5
    
    def __str__(self):
        return '<' + str(self.x) + ', '\
            + str(self.y) + '>'
            
  class Field(object):
    def __init__(self):
        self.drunks = {}
        
    def addDrunk(self, drunk, loc):
        if drunk in self.drunks:
            raise ValueError('Duplicate drunk')
        else:
            self.drunks[drunk] = loc
            
    def getLoc(self, drunk):
        if drunk not in self.drunks:
            raise ValueError('Drunk not in field')
        return self.drunks[drunk]
        
        
 -since you're using drunks as keys in a dict, the type drunk will have to be hashable
 -often have to think about multiple classes at a time during design processes
 
 def moveDrunk(self, drunk):
        if drunk not in self.drunks:
            raise ValueError('Drunk not in field')
        xDist, yDist = drunk.takeStep()
        currentLocation = self.drunks[drunk]
        #use move method of Location to get new location
        self.drunks[drunk] =\
            currentLocation.move(xDist, yDist)
            
 -check for drunk and raise exception if not there
 -example of defensive programming
 -because field is dict, reasonably efficient to see if drunk is in a set of keys
 
 Notable aspects of class Field
 -mapping of drunks to lcoations
 -unbounded size
 -allows multiple drunks w no contraints about how they relate to each other
 
 class Drunk(object):
    def __init__(self, name):
        self.name = name
    def __str__(self):
        return 'This drunk is named ' + self.name
        
 -not intended to be useful on its own
 -base class to be inherited
 
 2 subclasses of drunk
 -'usual' drunk who wanders around at random
 -'i hate winter' drunk who tries to move southward
 
 import random

class UsualDrunk(Drunk):
    def takeStep(self):
        stepChoices =\
            [(0.0,1.0),(0.0,-1.0),(1.0,0.0),(-1.0,0.0)]
        return random.choice(stepChoices)
    
class ColdDrunk(Drunk):
    def takeStep(self):
        stepChoices =\
            [(0.0,0.9),(0.0,-1.1),(1.0,0.0),(-1.0,0.0)]
        return random.choice(stepChoices)
